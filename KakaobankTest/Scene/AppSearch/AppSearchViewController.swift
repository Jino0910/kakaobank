//
//  AppSearchViewController.swift
//  KakaobankTest
//
//  Created by rowkaxl on 04/05/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import RxDataSources
import RxGesture
import SnapKit
import RxKeyboard
import Async

protocol AppSearchDisplayLogic: class {
    func displayRecentHistory(viewModel: AppSearch.RecentHitory.ViewModel)
}

class AppSearchViewController: UIViewController, AppSearchDisplayLogic {
    var interactor: AppSearchBusinessLogic?
    var router: (NSObjectProtocol & AppSearchRoutingLogic & AppSearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AppSearchInteractor()
        let presenter = AppSearchPresenter()
        let router = AppSearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configure()
        interactor?.doRecentHistory()
    }
    
    // MARK: Do something
    
    let disposeBag = DisposeBag()
    
    let searchController = UISearchController(searchResultsController: nil)
    
    @IBOutlet weak var recentTv: UITableView!
    var searchTv: UITableView = {
       
        let tv = UITableView(frame: .zero)
        tv.backgroundColor = .red
        tv.alpha = 0.0
        
        tv.registerCellClass(AppSearchViewListCell.self)
        
        return tv
    }()

    let sectionModels = BehaviorRelay<[AppSearchBaseItemSection]>(value: [])
    
    func displayRecentHistory(viewModel: AppSearch.RecentHitory.ViewModel) {
        print("hi \(viewModel.recentHitoryModels)")
        sectionModels.accept(viewModel.sectionModels)
    }
}

extension AppSearchViewController: UITableViewDelegate {
    
    private func configure() {
        configureUI()
        configureRx()
    }
    
    private func configureUI() {
        
        searchController.searchResultsUpdater = self
        searchController.delegate = self
        //
        searchController.obscuresBackgroundDuringPresentation = false
        
        searchController.searchBar.placeholder = "App Store"
        searchController.searchBar.setValue("취소", forKey: "_cancelButtonText")
        
        navigationItem.searchController = searchController
        //
        navigationItem.hidesSearchBarWhenScrolling = false
        
        //
        definesPresentationContext = true

        self.view.addSubview(searchTv)
        searchTv.delegate = self
        Async.main(after: 0.1) {
            guard let nav = self.navigationController else { return }
            self.searchTv.snp.makeConstraints { (make) in
                make.top.equalTo(nav.navigationBar.snp.bottom)
                make.leading.equalToSuperview()
                make.trailing.equalToSuperview()
                make.bottom.equalTo(0)
            }
        }
    }
    
    private func configureRx() {
        
        let dataSource = RxTableViewSectionedReloadDataSource<AppSearchBaseItemSection>(configureCell: {(_, tv, indexPath, item) -> UITableViewCell in
            
            let cell = tv.dequeueReusableCell(withIdentifier: "AppSearchMainListCell", for: indexPath) as! AppSearchMainListCell
            if let model = item.object as? RecentHitoryModel, let status = self.router?.dataStore?.appSearchStatus {
                cell.configure(model: model, type: item.type, status: status)
            }
            
            return cell
        })
        
        sectionModels.bind(to: recentTv.rx.items(dataSource: dataSource)).disposed(by: self.disposeBag)
        
        recentTv.rx.itemSelected
            .subscribe(onNext: { (_) in
                self.recentTv.reloadData()
            })
            .disposed(by: disposeBag)
        
        RxKeyboard.instance.visibleHeight
            .drive(onNext: { [weak self] (height) in
                guard let self = self else { return }
                guard let window = UIApplication.shared.keyWindow else { return }
                self.recentTv.contentInset = UIEdgeInsets(top: self.recentTv.contentInset.top, left: self.recentTv.contentInset.left, bottom: height + window.safeAreaInsets.bottom, right: self.recentTv.contentInset.right)
            })
            .disposed(by: disposeBag)
        
        searchTv.rx.tapGesture()
            .filter({_ in
                guard var data = self.router?.dataStore else { return false }
                return data.appSearchStatus != .searching
            })
            .subscribe(onNext: { [weak self](_) in
//                self?.removeSearchView()
                guard let self = self else { return }
                self.searchController.isActive = false
            }).disposed(by: disposeBag)
    }
}

extension AppSearchViewController: UISearchBarDelegate {
    // MARK: - UISearchBar Delegate
    func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
//        filterContentForSearchText(searchBar.text!)
    }
}

extension AppSearchViewController: UISearchResultsUpdating {
    // MARK: - UISearchResultsUpdating Delegate
    func updateSearchResults(for searchController: UISearchController) {
//        filterContentForSearchText(searchController.searchBar.text!)
        
        if searchController.searchBar.text!.isEmpty {
            setAppSearchStatus(value: .searchStart)
//            recentTv.reloadData()
        } else {
            setAppSearchStatus(value: .searching)
        }
    }
}

extension AppSearchViewController: UISearchControllerDelegate {
 
    func willPresentSearchController(_ searchController: UISearchController) {
        print("willPresentSearchController")
        addSearchView()
    }
    
    func didDismissSearchController(_ searchController: UISearchController) {
        print("willDismissSearchController")
        removeSearchView()
    }
}

extension AppSearchViewController {
    
    func addSearchView() {
        setAppSearchStatus(value: .searchStart)
        recentTv.reloadData()
    }
    
    func removeSearchView() {
        setAppSearchStatus(value: .searchNon)
        recentTv.reloadData()
    }
    
    func setSearchTv(alpha: CGFloat) {
        UIView.animate(withDuration: 0.1) {
            self.searchTv.alpha = alpha
        }
    }
    
    func setAppSearchStatus(value: AppSearchStatus) {
        guard var data = router?.dataStore  else { return }
        data.appSearchStatus = value
        setSearchTv(alpha: data.appSearchStatus.alpha)
    }
}


//UIView.animate(withDuration: 0.3,
//               animations: { () -> Void in
//
//                self.searchTv.alpha = 0.5
//
//}, completion: { (_) -> Void in
//
//})
