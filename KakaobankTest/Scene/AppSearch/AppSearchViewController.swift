//
//  AppSearchViewController.swift
//  KakaobankTest
//
//  Created by rowkaxl on 04/05/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import RxDataSources

protocol AppSearchDisplayLogic: class {
    func displayRecentHistory(viewModel: AppSearch.RecentHitory.ViewModel)
}

class AppSearchViewController: UIViewController, AppSearchDisplayLogic {
    var interactor: AppSearchBusinessLogic?
    var router: (NSObjectProtocol & AppSearchRoutingLogic & AppSearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AppSearchInteractor()
        let presenter = AppSearchPresenter()
        let router = AppSearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configure()
        interactor?.doRecentHistory()
    }
    
    // MARK: Do something
    
    let disposeBag = DisposeBag()
    
    let searchController = UISearchController(searchResultsController: nil)
    
    @IBOutlet weak var tv: UITableView!
    
    let dataSource = RxTableViewSectionedReloadDataSource<AppSearchBaseItemSection>(configureCell: {(_, tv, indexPath, item) -> UITableViewCell in
        
        let cell = tv.dequeueReusableCell(withIdentifier: "AppSearchMainListCell", for: indexPath) as! AppSearchMainListCell
        if let model = item.object as? RecentHitoryModel {
            cell.configure(model: model, type: item.type)
        }
        
        return cell
    })
        
    let sectionModels = BehaviorRelay<[AppSearchBaseItemSection]>(value: [])
    
    func displayRecentHistory(viewModel: AppSearch.RecentHitory.ViewModel) {
        print("hi \(viewModel.recentHitoryModels)")
        sectionModels.accept(viewModel.sectionModels)
    }
}

extension AppSearchViewController: UITableViewDelegate {
    
    private func configure() {
        configureUI()
        configureRx()
    }
    
    private func configureUI() {
        
        searchController.searchResultsUpdater = self
        //
        searchController.obscuresBackgroundDuringPresentation = false
        
        searchController.searchBar.placeholder = "App Store"
        searchController.searchBar.setValue("취소", forKey: "_cancelButtonText")
        
        navigationItem.searchController = searchController
        //
        navigationItem.hidesSearchBarWhenScrolling = false
        
        //
        definesPresentationContext = true
    }
    
    private func configureRx() {
        
        sectionModels.bind(to: tv.rx.items(dataSource: dataSource)).disposed(by: self.disposeBag)
    }
}

extension AppSearchViewController: UISearchBarDelegate {
    // MARK: - UISearchBar Delegate
    func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
//        filterContentForSearchText(searchBar.text!)
    }
}

extension AppSearchViewController: UISearchResultsUpdating {
    // MARK: - UISearchResultsUpdating Delegate
    func updateSearchResults(for searchController: UISearchController) {
//        filterContentForSearchText(searchController.searchBar.text!)
        
    }
}

