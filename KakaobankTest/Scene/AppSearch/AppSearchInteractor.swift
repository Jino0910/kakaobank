//
//  AppSearchInteractor.swift
//  KakaobankTest
//
//  Created by rowkaxl on 04/05/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import RealmSwift
import Async
import SwiftyJSON

protocol AppSearchBusinessLogic {
    func doRecentHistory()
    func doSearchWordHistory(request: AppSearch.SearchWordHitory.Request)
    func doSearchAppStore(request: AppSearch.SearchAppStore.Request)
}

protocol AppSearchDataStore {
    var appSearchStatus: AppSearchStatus { get set }
    var recentHistoryModels: [RecentHistoryModel]? { get set }
    var searchHistoryModels: [SearchHistoryModel]? { get set }
    var appInfoModels: [AppInfoModel]? { get set }
}

class AppSearchInteractor: AppSearchBusinessLogic, AppSearchDataStore {
    
    var presenter: AppSearchPresentationLogic?
    var worker = AppSearchWorker()
    
    let disposeBag = DisposeBag()
    
    var appSearchStatus: AppSearchStatus = .searchBefore
    var recentHistoryModels: [RecentHistoryModel]?
    var searchHistoryModels: [SearchHistoryModel]?
    var appInfoModels: [AppInfoModel]?
    
    let realm = try! Realm()
    
    var recentHistoryList: Results<RecentHistoryRealmItem> = {
        try! Realm()
            .objects(RecentHistoryRealmItem.self)
            .sorted(byKeyPath: "date", ascending: false)
    }()
    
    var searchHistoryList: Results<SearchHistoryRealmItem> = {
        try! Realm()
            .objects(SearchHistoryRealmItem.self)
    }()
    
    var recentHistoryItemNotificationToken: NotificationToken?
//    var searchHistoryItemNotificationToken: NotificationToken?
    
    // MARK: Do something
    
    func doRecentHistory() {
        
        recentHistoryItemNotificationToken = recentHistoryList.observe({ [weak self](_:RealmCollectionChange) in

            guard let self = self else { return }
            var models: [RecentHistoryModel] = []
            for item in self.recentHistoryList {
                models.append(RecentHistoryModel(searchWord: item.searchWord, date: item.date))
            }
            self.recentHistoryModels = models
            
            let response = AppSearch.RecentHitory.Response(recentHistoryModels: models)
            self.presenter?.presentRecentHistory(response: response)
        })
        
//        searchHistoryItemNotificationToken = searchHistoryList.observe({ [weak self](_:RealmCollectionChange) in
//
//            guard let self = self else { return }
//            for item in self.searchHistoryList {
////                print("\(item.searchWord)")
//            }
//        })
    }
    
    func doSearchWordHistory(request: AppSearch.SearchWordHitory.Request) {
        
        let predicate = NSPredicate(format: "searchWord CONTAINS %@", request.query)
        guard let results = searchHistoryList.realm?.objects(SearchHistoryRealmItem.self).filter(predicate) else { return }
        
        var models: [SearchHistoryModel] = []
        for item in results {
            models.append(SearchHistoryModel(searchWord: item.searchWord, date: item.date))
        }
        self.searchHistoryModels = models
        
        let response = AppSearch.SearchWordHitory.Response(searchHistoryModel: models)
        self.presenter?.presentSearchWordHistory(response: response)
    }
    
    func doSearchAppStore(request: AppSearch.SearchAppStore.Request) {
        
        self.worker.requestSearchAppStore(query: request.query)
            .filter {$0.0 == .code200}
            .subscribe(onSuccess: { (_, json) in
                
                // 검색어 저장
                self.saveSearchWord(query: request.query)
                
                // 검색 히스토리 저장
                self.saveSearchHistory(json: json)

                var models: [AppInfoModel] = []
                for item in json["results"].array ?? [] {
                    models.append(AppInfoModel(json: item))
                }
                self.appInfoModels = models
                
                
                
                let response = AppSearch.SearchAppStore.Response(json: json, appInfoModels: models)
                self.presenter?.presentSearchAppStore(response: response)
                
            })
            .disposed(by: disposeBag)
    }
}

extension AppSearchInteractor {
    
    func saveSearchWord(query: String) {
        
        Async.main() {
            
            try! self.realm.write {
                
                for item in self.recentHistoryList {
                    if item.searchWord == query {
                        self.realm.delete(item)
                        break
                    }
                }
                
                let item = RecentHistoryRealmItem()
                item.searchWord = query
                self.realm.add(item)
            }
        }
    }
    
    func saveSearchHistory(json: JSON) {
        
        Async.main() {
            
            try! self.realm.write {

                var newHistoryRealmItem: [SearchHistoryRealmItem] = []
                
                for item2 in json["results"].array ?? [] {
                    
                    let realmItem = SearchHistoryRealmItem()
                    realmItem.searchWord = item2["trackName"].stringValue
                    newHistoryRealmItem.append(realmItem)
                    
                    for item1 in self.searchHistoryList {

                        if item1.searchWord == item2["trackName"].stringValue {
                            self.realm.delete(item1)
                            continue
                        }
                    }
                }
                
                self.realm.add(newHistoryRealmItem)
            }
        }
    }
}
