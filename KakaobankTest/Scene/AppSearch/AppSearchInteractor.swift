//
//  AppSearchInteractor.swift
//  KakaobankTest
//
//  Created by rowkaxl on 04/05/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import RealmSwift
import Async

protocol AppSearchBusinessLogic {
    func doRecentHistory()
    func doSearchAppStory(request: AppSearch.SearchAppStory.Request)
}

protocol AppSearchDataStore {
    var appSearchStatus: AppSearchStatus { get set }
}

class AppSearchInteractor: AppSearchBusinessLogic, AppSearchDataStore {
    var presenter: AppSearchPresentationLogic?
    var worker = AppSearchWorker()
    
    let disposeBag = DisposeBag()
    
    var appSearchStatus: AppSearchStatus = .searchNon
    
    let realm = try! Realm()
    
    var recentHistoryList: Results<RecentHistoryRealmItem> = {
        try! Realm()
            .objects(RecentHistoryRealmItem.self)
            .sorted(byKeyPath: "date", ascending: false)
    }()
    
    var recentHistoryItemNotificationToken: NotificationToken?
    
    // MARK: Do something
    
    func doRecentHistory() {
        
        recentHistoryItemNotificationToken = recentHistoryList.observe({ [weak self](_:RealmCollectionChange) in

            guard let self = self else { return }
            var models: [RecentHitoryModel] = []
            for item in self.recentHistoryList {
                models.append(RecentHitoryModel(searchWord: item.searchWord, date: item.date))
            }
            
            let response = AppSearch.RecentHitory.Response(recentHitoryModels: models)
            self.presenter?.presentRecentHistory(response: response)
        })
    }
    
    func doSearchAppStory(request: AppSearch.SearchAppStory.Request) {
        
        self.worker.requestSearchAppStore(query: request.query)
            .filter {$0.0 == .code200}
            .subscribe(onSuccess: { (_, json) in
                
                print(json)
                
                // 검색어 저장
                self.saveSearchWord(query: request.query)
                
                
                // 검색 히스토리 저장
                
                
            })
            .disposed(by: disposeBag)
    }
    
    func doSearchWordHistory(request: AppSearch.SearchAppStory.Request) {
        
    }
}

extension AppSearchInteractor {
    
    func saveSearchWord(query: String) {
        
        Async.main() {
            
            let keyword = query
            
            try! self.realm.write {
                
                for item in self.recentHistoryList {
                    if item.searchWord == keyword {
                        self.realm.delete(item)
                        break
                    }
                }
                
                let item = RecentHistoryRealmItem()
                item.searchWord = keyword
                self.realm.add(item)
            }
        }
    }
}
