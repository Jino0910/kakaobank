//
//  AppSearchInteractor.swift
//  KakaobankTest
//
//  Created by rowkaxl on 04/05/2019.
//  Copyright (c) 2019 rowkaxl. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import RealmSwift

protocol AppSearchBusinessLogic {
    func doRecentHistory()
}

protocol AppSearchDataStore {
    //var name: String { get set }
}

class AppSearchInteractor: AppSearchBusinessLogic, AppSearchDataStore {
    var presenter: AppSearchPresentationLogic?
    var worker = AppSearchWorker()
    
    let realm = try! Realm()
    
    var recentHistoryList: Results<RecentHistoryRealmItem> = {
        try! Realm()
            .objects(RecentHistoryRealmItem.self)
            .sorted(byKeyPath: "date", ascending: false)
    }()
    
    var recentHistoryItemNotificationToken: NotificationToken?
    
    // MARK: Do something
    
    func doRecentHistory() {
        
        recentHistoryItemNotificationToken = recentHistoryList.observe({ [weak self](_:RealmCollectionChange) in

            guard let self = self else { return }
            var models: [RecentHitoryModel] = []
            for item in self.recentHistoryList {
                models.append(RecentHitoryModel(searchWord: item.searchWord, date: item.date))
            }
            
            let response = AppSearch.RecentHitory.Response(recentHitoryModels: models)
            self.presenter?.presentRecentHistory(response: response)
        })
        
//        let realm = try! Realm()
        
//        let keyword = "카카오뱅크"
//
//        try! realm.write {
//
//
//            for item in recentHistoryList {
//                if item.searchWord == keyword {
//                    realm.delete(item)
//                    break
//                }
//            }
//
//
//            let item = RecentHistoryRealmItem()
//            item.searchWord = keyword
//            realm.add(item)
//        }
        
    }
}


